import{a as m}from"./chunk-THHCAWET.js";import{a as u}from"./chunk-6FMLIRIY.js";import{Jb as k,L as c,Ma as r,Na as g,ha as d,ra as l,rb as o}from"./chunk-ZQZS5QUD.js";import{a as i,b as a,g as C}from"./chunk-P2VZOJAX.js";var f=C(k());var y={title:"Code Best Practices Standard",mdFile:"./index.md",category:m,order:3},n=y;var h=[];var R={},p=R;var b='<h1 id="code-best-practices-standard" class="ngde">Code Best Practices Standard<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#code-best-practices-standard"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h1><p class="ngde">This document aims to establish a set of guidelines that developers should adhere to when contributing to the project. These best practices are designed to ensure a consistent development process, high code quality, and comprehensive documentation.</p><h4 id="21-semantic-versioning" class="ngde">2.1 Semantic Versioning<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#21-semantic-versioning"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Follow semantic versioning (SemVer) guidelines for version increments:</p><ul class="ngde"><li class="ngde"><strong class="ngde">Major Release</strong>: Significant new features, code refactoring, or third-party library upgrades.<ul class="ngde"><li class="ngde">Update the first number of the version.</li><li class="ngde">Update <code class="ngde">RELEASE_NOTES.md</code> and relevant documentation.</li></ul></li><li class="ngde"><strong class="ngde">Minor Release</strong>: Smaller new features or improvements.<ul class="ngde"><li class="ngde">Update the second number of the version.</li><li class="ngde">Update <code class="ngde">RELEASE_NOTES.md</code> and other related documentation.</li></ul></li><li class="ngde"><strong class="ngde">Patch Release</strong>: Low-risk bug fixes.<ul class="ngde"><li class="ngde">Update the third number of the version.</li><li class="ngde">Update <code class="ngde">RELEASE_NOTES.md</code>, <code class="ngde">CHANGE_LOGS.md</code> and other related documentation.</li></ul></li></ul><h4 id="22-automated-code-standard-review" class="ngde">2.2 Automated Code Standard Review<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#22-automated-code-standard-review"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Implement automated code standard checks to enforce best practices and minimize errors in every pull request (PR):</p><ul class="ngde"><li class="ngde"><strong class="ngde">Automated Checks Implementation</strong>: Integrate automated code standard checks into the PR workflow to systematically review code against predefined standards and practices.</li><li class="ngde"><strong class="ngde">Enforcement of Best Practices</strong>: Ensure that these checks enforce adherence to coding guidelines, style conventions, and other established standards, helping maintain code quality and consistency.</li></ul><h4 id="23-code-formatting" class="ngde">2.3 Code Formatting<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#23-code-formatting"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Integrate a code formatting extension or tool to ensure consistent code formatting across the project:</p><ul class="ngde"><li class="ngde"><strong class="ngde">Automated Formatting Setup</strong>: Configure the code formatting tool to automatically format code changes upon saving or committing, ensuring consistency without manual intervention.</li><li class="ngde"><strong class="ngde">Enforce Formatting Rules</strong>: Integrate code formatting rules into the linting process to enforce standards and catch any deviations during code reviews and continuous integration (CI) processes.</li></ul><h4 id="24-code-comments" class="ngde">2.4 Code Comments<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#24-code-comments"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Enhance code readability and maintainability by incorporating meaningful comments:</p><ul class="ngde"><li class="ngde"><strong class="ngde">Class/Method Declaration Comments</strong>: Add comments to every new class/method declaration to provide a clear understanding of its purpose and functionality at a high level.</li><li class="ngde"><strong class="ngde">Internal Method Comments</strong>: Insert internal comments within methods to explain complex logic or functionality, aiding comprehension for developers who may encounter the code in the future.</li></ul><h4 id="25-unit-test-coverage-increase" class="ngde">2.5 Unit Test Coverage Increase<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#25-unit-test-coverage-increase"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Promote code robustness and error minimization by mandating an increase in unit test coverage with every PR:</p><ul class="ngde"><li class="ngde"><strong class="ngde">Coverage Requirement</strong>: Make it a prerequisite for every PR to include additional unit tests, ensuring basic flows are thoroughly tested.</li><li class="ngde"><strong class="ngde">Error Minimization</strong>: By expanding test coverage, the likelihood of undetected bugs decreases, leading to more reliable code.</li></ul><h4 id="26-test-cases-compliance" class="ngde">2.6 Test Cases Compliance<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#26-test-cases-compliance"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Guarantee adherence to defined test cases for all work items:</p><ul class="ngde"><li class="ngde"><strong class="ngde">Comprehensive Testing</strong>: Ensure that all specified test cases for each work item are meticulously reviewed and verified to meet compliance standards.</li><li class="ngde"><strong class="ngde">Validation of Test Coverage</strong>: Confirm that the executed test cases adequately cover the functionality outlined in the work items, ensuring thorough testing of the implemented features.</li></ul><h4 id="27-pull-request-naming-convention" class="ngde">2.7 Pull Request Naming Convention<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#27-pull-request-naming-convention"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Follow a consistent naming convention for PR titles:</p><ul class="ngde"><li class="ngde"><strong class="ngde">Prefix</strong>: Use <code class="ngde">PR</code> and a relevant prefix indicating the type of change.<ul class="ngde"><li class="ngde"><code class="ngde">feat</code>: New feature implementation.</li><li class="ngde"><code class="ngde">fix</code>: Bug fix.</li><li class="ngde"><code class="ngde">refactor</code>: Code refactoring.</li><li class="ngde"><code class="ngde">docs</code>: Documentation changes.</li><li class="ngde"><code class="ngde">style</code>: Code style/formatting changes.</li><li class="ngde"><code class="ngde">test</code>: Adding or modifying tests.</li><li class="ngde"><code class="ngde">chore</code>: Routine tasks/tooling changes.</li></ul></li><li class="ngde"><strong class="ngde">Brief Description</strong>: Provide a concise and descriptive title summarizing the purpose of the PR.</li><li class="ngde"><strong class="ngde">Issue Reference</strong>: Include the corresponding issue number from your issue tracking system (e.g., GitHub issues) if applicable.</li></ul><p class="ngde">Example Pull Request Titles:</p><ul class="ngde"><li class="ngde"><code class="ngde">PR-feat: Add user authentication functionality</code></li><li class="ngde"><code class="ngde">PR-fix: Resolve issue with form validation (#456)</code></li><li class="ngde"><code class="ngde">PR-refactor: Update data fetching logic</code></li><li class="ngde"><code class="ngde">PR-docs: Update README with deployment instructions</code></li><li class="ngde"><code class="ngde">PR-test: Add unit tests for user service</code></li><li class="ngde"><code class="ngde">PR-style: Format codebase using Prettier</code></li><li class="ngde"><code class="ngde">PR-chore: Update Angular dependencies</code></li></ul><h4 id="28-uiux-check-for-majorminor-releases" class="ngde">2.8 UI/UX Check for Major/Minor Releases<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#28-uiux-check-for-majorminor-releases"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><p class="ngde">Perform UI/UX checks for every major or minor release to ensure quality standards are met.</p><h4 id="a-standards-applied-to-frontend-solutions" class="ngde">a. Standards Applied to Frontend Solutions<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#a-standards-applied-to-frontend-solutions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><ol class="ngde"><li class="ngde"><strong class="ngde">Semantic Versioning</strong>: Follow versioning guidelines. Update version in <code class="ngde">package.json</code> field of each project.</li><li class="ngde"><strong class="ngde">Automated Code Standard Review</strong>: Apply linting for frontend code using the <code class="ngde">eslint</code> library for Angular environments.</li><li class="ngde"><strong class="ngde">Code Formatting</strong>: Ensure consistent code formatting using the <code class="ngde">prettier</code> library for Angular environments.</li><li class="ngde"><strong class="ngde">Code Comments</strong>: Include meaningful comments using the <code class="ngde">Better Comments</code> extension for VSO.</li><li class="ngde"><strong class="ngde">Unit Test Coverage Increase</strong>: Increase unit test coverage.</li><li class="ngde"><strong class="ngde">Test Cases Compliance</strong>: Check test cases compliance.</li><li class="ngde"><strong class="ngde">Pull Request Naming Convention</strong>: Follow guidelines.</li><li class="ngde"><strong class="ngde">UI/UX Check for Major/Minor Releases</strong>: Perform UI/UX checks for every major or minor release to ensure quality standards.</li></ol><h4 id="b-standards-applied-to-backend-solutions" class="ngde">b. Standards Applied to Backend Solutions<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#b-standards-applied-to-backend-solutions"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><ol class="ngde"><li class="ngde"><strong class="ngde">Semantic Versioning</strong>: Follow versioning guidelines.</li><li class="ngde"><strong class="ngde">Automated Code Standard Review</strong>: Apply linting for backend code using one of these options: <code class="ngde">StyleCop</code>, <code class="ngde">ReSharper</code>, <code class="ngde">.Code</code>.</li><li class="ngde"><strong class="ngde">Code Formatting</strong>: Ensure consistent code formatting using <code class="ngde">dotnet format</code> with <code class="ngde">.editorconfig</code> file.</li><li class="ngde"><strong class="ngde">Code Comments</strong>: Include meaningful comments using one of these options: <code class="ngde">XML Documentation Comments</code>, <code class="ngde">GhostDoc</code>, <code class="ngde">CodeMaid</code>, <code class="ngde">DocFX</code>.</li><li class="ngde"><strong class="ngde">Unit Test Coverage Increase</strong>: Increase unit test coverage.</li><li class="ngde"><strong class="ngde">Test Cases Compliance</strong>: Check test cases compliance.</li><li class="ngde"><strong class="ngde">Pull Request Naming Convention</strong>: Follow guidelines.</li></ol><h4 id="c-standards-applied-to-extension-solution" class="ngde">c. Standards Applied to Extension Solution<a title="Link to heading" class="ng-doc-header-link ngde" href="/architecture-documentation/code-best-practices-standard#c-standards-applied-to-extension-solution"><ng-doc-icon icon="link-2" size="16" class="ngde"></ng-doc-icon></a></h4><ol class="ngde"><li class="ngde"><strong class="ngde">Semantic Versioning</strong>: Follow versioning guidelines. Update version in <code class="ngde">manifest.json</code> field of each project.</li><li class="ngde"><strong class="ngde">Automated Code Standard Review</strong>: Apply linting for frontend code using the <code class="ngde">eslint</code> library for Typescript environments.</li><li class="ngde"><strong class="ngde">Code Formatting</strong>: Ensure consistent code formatting using the <code class="ngde">prettier</code> library for Typescript environments.</li><li class="ngde"><strong class="ngde">Code Comments</strong>: Include meaningful comments using the <code class="ngde">Better Comments</code> extension for VSO.</li><li class="ngde"><strong class="ngde">Unit Test Coverage Increase</strong>: Increase unit test coverage.</li><li class="ngde"><strong class="ngde">Test Cases Compliance</strong>: Check test cases compliance.</li><li class="ngde"><strong class="ngde">Pull Request Naming Convention</strong>: Follow guidelines.</li></ol>',P=(()=>{let e=class e extends o{constructor(){super(),this.routePrefix="",this.pageType="guide",this.pageContent=b,this.page=n,this.demoAssets=p}};e.\u0275fac=function(t){return new(t||e)},e.\u0275cmp=c({type:e,selectors:[["ng-doc-page-architecture-documentation-code-best-practices-standard"]],standalone:!0,features:[r([{provide:o,useExisting:e},h,n.providers??[]]),d,g],decls:1,vars:0,template:function(t,w){t&1&&l(0,"ng-doc-page")},dependencies:[u],encapsulation:2,changeDetection:0});let s=e;return s})(),S=[a(i({},(0,f.isRoute)(n.route)?n.route:{}),{path:"",component:P,title:"Code Best Practices Standard"})],M=S;export{P as DynamicComponent,M as default};
